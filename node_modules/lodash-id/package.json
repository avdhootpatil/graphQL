{
  "_args": [
    [
      {
        "raw": "lodash-id@^0.14.0",
        "scope": null,
        "escapedName": "lodash-id",
        "name": "lodash-id",
        "rawSpec": "^0.14.0",
        "spec": ">=0.14.0 <0.15.0",
        "type": "range"
      },
      "C:\\Users\\USer\\Desktop\\github\\grphQl\\node_modules\\json-server"
    ]
  ],
  "_from": "lodash-id@>=0.14.0 <0.15.0",
  "_id": "lodash-id@0.14.0",
  "_inCache": true,
  "_location": "/lodash-id",
  "_nodeVersion": "7.7.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/lodash-id-0.14.0.tgz_1489530322395_0.7156153141986579"
  },
  "_npmUser": {
    "name": "typicode",
    "email": "typicode@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lodash-id@^0.14.0",
    "scope": null,
    "escapedName": "lodash-id",
    "name": "lodash-id",
    "rawSpec": "^0.14.0",
    "spec": ">=0.14.0 <0.15.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-server"
  ],
  "_resolved": "https://registry.npmjs.org/lodash-id/-/lodash-id-0.14.0.tgz",
  "_shasum": "baf48934e543a1b5d6346f8c84698b1a8c803896",
  "_shrinkwrap": null,
  "_spec": "lodash-id@^0.14.0",
  "_where": "C:\\Users\\USer\\Desktop\\github\\grphQl\\node_modules\\json-server",
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/typicode/lodash-id/issues"
  },
  "dependencies": {},
  "description": "Use JavaScript objects as databases",
  "devDependencies": {
    "husky": "^0.11.8",
    "lodash": "^4.6.1",
    "mocha": "^3.2.0",
    "pkg-ok": "^1.0.1",
    "sinon": "~1.8.1",
    "standard": "^8.6.0",
    "underscore": "^1.8.3",
    "webpack": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "baf48934e543a1b5d6346f8c84698b1a8c803896",
    "tarball": "https://registry.npmjs.org/lodash-id/-/lodash-id-0.14.0.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "gitHead": "adf8c8e99e598c448e6db6ec5705de9d9edb96ed",
  "homepage": "https://github.com/typicode/lodash-id#readme",
  "keywords": [
    "lodash",
    "lowdb",
    "underscore",
    "id",
    "resource",
    "mixin"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "typicode",
      "email": "typicode@gmail.com"
    }
  ],
  "name": "lodash-id",
  "optionalDependencies": {},
  "readme": "# lodash-id [![Build Status](https://travis-ci.org/typicode/lodash-id.svg)](https://travis-ci.org/typicode/lodash-id) [![NPM version](https://badge.fury.io/js/lodash-id.svg)](http://badge.fury.io/js/lodash-id)\r\n\r\n> `lodash-id` makes it easy to manipulate id-based resources with [lodash](https://lodash.com/) or [lowdb](https://github.com/typicode/lowdb)\r\n\r\n* `getById`\r\n* `insert`\r\n* `upsert`\r\n* `updateById`\r\n* `updateWhere`\r\n* `replaceById`\r\n* `removeById`\r\n* `removeWhere`\r\n* `createId`\r\n\r\n## Install\r\n\r\n```bash\r\n# with lodash\r\nnpm install lodash lodash-id --save\r\n\r\n# with lowdb\r\nnpm install lowdb lodash-id --save\r\n```\r\n\r\n__Note__ `lodash-id` is also compatible with [underscore](http://underscorejs.org/)\r\n\r\n## API\r\n\r\nIn the API examples, we're assuming `db` to be:\r\n\r\n```js\r\nconst db = {\r\n  posts: [\r\n    {id: 1, body: 'one', published: false},\r\n    {id: 2, body: 'two', published: true}\r\n  ],\r\n  comments: [\r\n    {id: 1, body: 'foo', postId: 1},\r\n    {id: 2, body: 'bar', postId: 2}\r\n  ]\r\n}\r\n```\r\n\r\n__getById(collection, id)__\r\n\r\nFinds and returns document by id or undefined.\r\n\r\n```js\r\nconst post = _.getById(db.posts, 1)\r\n```\r\n\r\n__insert(collection, document)__\r\n\r\nAdds document to collection, sets an id and returns created document.\r\n\r\n```js\r\nconst post = _.insert(db.posts, { body: 'New post' })\r\n```\r\n\r\nIf the document already has an id, and it is the same as an existing document in the collection, an error is thrown.\r\n\r\n```js\r\n_.insert(db.posts, { id: 1, body: 'New post' })\r\n_.insert(db.posts, { id: 1, title: 'New title' }) // Throws an error\r\n```\r\n\r\n__upsert(collection, document)__\r\n\r\nAdds document to collection, sets an id and returns created document.\r\n\r\n```js\r\nconst post = _.upsert(db.posts, { body: 'New post' })\r\n```\r\n\r\nIf the document already has an id, it will be used to insert or replace.\r\n\r\n```js\r\n_.upsert(db.posts, { id: 1, body: 'New post' })\r\n_.upsert(db.posts, { id: 1, title: 'New title' })\r\n_.getById(db.posts, 1) // { id: 1, title: 'New title' }\r\n```\r\n\r\n__updateById(collection, id, attrs)__\r\n\r\nFinds document by id, copies properties to it and returns updated document or undefined.\r\n\r\n```js\r\nconst post = _.updateById(db.posts, 1, { body: 'Updated body' })\r\n```\r\n\r\n__updateWhere(collection, whereAttrs, attrs)__\r\n\r\nFinds documents using `_.where`, updates documents and returns updated documents or an empty array.\r\n\r\n```js\r\n// Publish all unpublished posts\r\nconst posts = _.updateWhere(db.posts, { published: false }, { published: true })\r\n```\r\n\r\n__replaceById(collection, id, attrs)__\r\n\r\nFinds document by id, replaces properties and returns document or undefined.\r\n\r\n```js\r\nconst post = _.replaceById(db.posts, 1, { foo: 'bar' })\r\n```\r\n\r\n__removeById(collection, id)__\r\n\r\nRemoves document from collection and returns it or undefined.\r\n\r\n```js\r\nconst comment = _.removeById(db.comments, 1)\r\n```\r\n\r\n__removeWhere(collection, whereAttrs)__\r\n\r\nRemoves documents from collection using `_.where` and returns removed documents or an empty array.\r\n\r\n```js\r\nconst comments = _.removeWhere(db.comments, { postId: 1 })\r\n```\r\n\r\n__id__\r\n\r\nOverwrite it if you want to use another id property.\r\n\r\n```js\r\n_.id = '_id'\r\n```\r\n\r\n__createId(collectionName, doc)__\r\n\r\nCalled by lodash-id when a document is inserted. Overwrite it if you want to change id generation algorithm.\r\n\r\n```js\r\n_.createId = (collectionName, item) => `${collectionName}-${item.prop}-${Date.now()}`\r\n```\r\n\r\n## Changelog\r\n\r\nSee details changes for each version in the [release notes](https://github.com/typicode/lodash-id/releases).\r\n\r\n## License\r\n\r\nMIT - [Typicode :cactus:](https://github.com/typicode)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/typicode/lodash-id.git"
  },
  "scripts": {
    "prepublish": "npm test",
    "prepush": "npm test",
    "test": "mocha && standard && pkg-ok"
  },
  "standard": {
    "fix": true,
    "env": {
      "mocha": true
    }
  },
  "version": "0.14.0"
}
